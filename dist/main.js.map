{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/interpreter.ts","webpack:///./src/rom_manager.ts","webpack:///./src/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","TIMER_FREQUENCY","STACK_LIMIT","extractAddress","instruction","extractRegister","extractRegisterAndConstant","extractTwoRegisters","Chip8Interpreter","canvas","width","height","_this","this","memory","Uint8Array","registers","addressRegister","pc","sp","stack","Uint16Array","delayTimer","soundTimer","setInterval","display","ctx","getContext","state","keys","keypressRegister","_loadCharacters","_i","characters_1","length","_a","character_1","byte","loadROMData","data","draw","pixelWidth","pixelHeight","fillStyle","fillRect","y","x","index","executeInstruction","map","console","error","toString","register","constant","_b","_c","registerX","registerY","_d","_e","_f","result","notBorrow","lsb","msb","_g","address","_h","Math","floor","random","_j","extractTwoRegistersAndConstant","screenX_1","screenY_1","row","pixel","registerValue","keydown","assert","keyup","cycle","Promise","resolve","_reject","$fileInput","document","createElement","type","body","appendChild","addEventListener","file","files","remove","then","reject","reader","FileReader","readAsArrayBuffer","readROM","interpreter","rom","keyToIndex","parseInt","window","e","isNaN","lastUpdate","$ipsInput","min","max","$ipsInputLabel","setAttribute","textContent","msPerFrame","requestAnimationFrame","loop","timestamp","frames_1"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\r\n\r\nexport const TIMER_FREQUENCY = 60 /* hz */;\r\nexport const STACK_LIMIT = 16 /* calls */;\r\n\r\nfunction extractAddress(instruction: number) {\r\n    return instruction & 0x0FFF;\r\n}\r\n\r\nfunction extractRegister(instruction: number) {\r\n    return (instruction & 0x0F00) >> (8);\r\n}\r\n\r\nfunction extractRegisterAndConstant(instruction: number) {\r\n    return [(instruction & 0x0F00) >> 8, instruction & 0x00FF];\r\n}\r\n\r\nfunction extractTwoRegisters(instruction: number) {\r\n    return [(instruction & 0x0F00) >> 8, (instruction & 0x00F0) >> 4];\r\n}\r\n\r\nfunction extractTwoRegistersAndConstant(instruction: number) {\r\n    return [(instruction & 0x0F00) >> 8, (instruction & 0x00F0) >> 4, instruction & 0x000F];\r\n}\r\n\r\nexport class Chip8Interpreter {\r\n    // Main memory\r\n    // 0x000-0x1FF is internal memory which we utilize for character ROM.\r\n    // 0x200 and up is the program's memory\r\n    memory: Uint8Array;\r\n\r\n    // 16 registers\r\n    registers: Uint8Array;\r\n\r\n    // I register\r\n    addressRegister: number;\r\n\r\n    // Program counter, must always be even.\r\n    pc: number;\r\n\r\n    // Stack, implemented as a stackpointer + array to be true to the spec.\r\n    sp: number;\r\n    stack: Uint16Array;\r\n\r\n    // Timers. The sound timer does nothing.\r\n    delayTimer: number;\r\n    soundTimer: number;\r\n\r\n    // Width in internal pixels (not screen pixels)\r\n    width: number;\r\n    height: number;\r\n\r\n    // Internal display. Each pixel is either 0 and 1.\r\n    display: Uint8Array;\r\n\r\n    // Canvas and context.\r\n    canvas: HTMLCanvasElement;\r\n    ctx: CanvasRenderingContext2D;\r\n\r\n    // Key handling\r\n    state: \"running\" | \"waitkeypress\" | \"finished\";\r\n    keys: Uint8Array;\r\n    keypressRegister: number | null;\r\n\r\n    constructor(canvas: HTMLCanvasElement, width: number = 64, height: number = 32) {\r\n        this.memory = new Uint8Array(4096);\r\n\r\n        this.registers = new Uint8Array(16);\r\n        this.addressRegister = 0;\r\n        this.pc = 0x200;\r\n\r\n        this.sp = -1;\r\n        this.stack = new Uint16Array(STACK_LIMIT);\r\n\r\n        this.delayTimer = 0;\r\n        this.soundTimer = 0;\r\n\r\n        setInterval(() => {\r\n            this.delayTimer -= 1;\r\n            this.soundTimer -= 1;\r\n        }, 1000 / TIMER_FREQUENCY);\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n        this.display = new Uint8Array(this.width * this.height);\r\n\r\n        this.canvas = canvas;\r\n        this.ctx = canvas.getContext(\"2d\");\r\n\r\n        this.state = \"running\";\r\n        this.keys = new Uint8Array(16);\r\n        this.keypressRegister = null;\r\n\r\n        this._loadCharacters();\r\n    }\r\n\r\n    _loadCharacters() {\r\n        const characters = [\r\n            [0xF0, 0x90, 0x90, 0x90, 0xF0], // 0\r\n            [0x20, 0x60, 0x20, 0x20, 0x70], // 1\r\n            [0xF0, 0x10, 0xF0, 0x80, 0xF0], // 2\r\n            [0xF0, 0x10, 0xF0, 0x10, 0xF0], // 3\r\n            [0x90, 0x90, 0xF0, 0x10, 0x10], // 4\r\n            [0xF0, 0x80, 0xF0, 0x10, 0xF0], // 5\r\n            [0xF0, 0x80, 0xF0, 0x90, 0xF0], // 6\r\n            [0xF0, 0x10, 0x20, 0x40, 0x40], // 7\r\n            [0xF0, 0x90, 0xF0, 0x90, 0xF0], // 8\r\n            [0xF0, 0x90, 0xF0, 0x10, 0xF0], // 9\r\n            [0xF0, 0x90, 0xF0, 0x90, 0x90], // A\r\n            [0xE0, 0x90, 0xE0, 0x90, 0xE0], // B\r\n            [0xF0, 0x80, 0x80, 0x80, 0xF0], // C\r\n            [0xE0, 0x90, 0x90, 0x90, 0xE0], // D\r\n            [0xF0, 0x80, 0xF0, 0x80, 0xF0], // E\r\n            [0xF0, 0x80, 0xF0, 0x80, 0x80], // F\r\n        ];\r\n\r\n        let i = 0;\r\n        for (let character of characters) {\r\n            for (let byte of character) {\r\n                this.memory[i++] = byte;\r\n            }\r\n        }\r\n    }\r\n\r\n    loadROMData(data: Uint8Array) {\r\n        for (let i = 0; i < data.length; ++i) {\r\n            this.memory[this.pc + i] = data[i];\r\n        }\r\n    }\r\n\r\n    draw() {\r\n        const pixelWidth = this.canvas.width / this.width;\r\n        const pixelHeight = this.canvas.height / this.height;\r\n\r\n        this.ctx.fillStyle = \"black\";\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\r\n\r\n        this.ctx.fillStyle = \"white\";\r\n        for (let y = 0; y < this.height; ++y) {\r\n            for (let x = 0; x < this.width; ++x) {\r\n                const index = y * this.width + x;\r\n                const pixel = this.display[index];\r\n                if (pixel) this.ctx.fillRect(x * pixelWidth, y * pixelHeight, pixelWidth, pixelHeight);\r\n            }\r\n        }\r\n    }\r\n\r\n    executeInstruction(instruction: number) {\r\n        switch ((instruction & 0xF000) >> (8 + 4)) {\r\n            case 0: {\r\n                if (instruction === 0x00E0) {\r\n                    this.display = this.display.map(() => 0);\r\n                } else if (instruction === 0x00EE) {\r\n                    this.pc = this.stack[this.sp];\r\n                    this.sp -= 1;\r\n                } else {\r\n                    console.error(`Unknown instruction: ${instruction.toString(16)}`);\r\n                    return \"break\";\r\n                }\r\n                break;\r\n            }\r\n\r\n            case 1: {\r\n                this.pc = extractAddress(instruction);\r\n                break;\r\n            }\r\n\r\n            case 2: {\r\n                this.sp += 1;\r\n                this.stack[this.sp] = this.pc;\r\n                this.pc = extractAddress(instruction);\r\n                break;\r\n            }\r\n\r\n            case 3: {\r\n                const [register, constant] = extractRegisterAndConstant(instruction);\r\n                if (this.registers[register] === constant) {\r\n                    this.pc += 2;\r\n                }\r\n                break;\r\n            }\r\n\r\n            case 4: {\r\n                const [register, constant] = extractRegisterAndConstant(instruction);\r\n                if (this.registers[register] !== constant) {\r\n                    this.pc += 2;\r\n                }\r\n                break;\r\n            }\r\n\r\n            case 5: {\r\n                const [registerX, registerY] = extractTwoRegisters(instruction);\r\n                if (this.registers[registerX] === this.registers[registerY]) {\r\n                    this.pc += 2;\r\n                }\r\n                break;\r\n            }\r\n\r\n            case 6: {\r\n                const [register, constant] = extractRegisterAndConstant(instruction);\r\n                this.registers[register] = constant;\r\n                break;\r\n            }\r\n\r\n            case 7: {\r\n                const [register, constant] = extractRegisterAndConstant(instruction);\r\n                this.registers[register] += constant;\r\n                break;\r\n            }\r\n\r\n            case 8: {\r\n                const [registerX, registerY] = extractTwoRegisters(instruction);\r\n                switch (instruction & 0xF) {\r\n                    case 0: {\r\n                        this.registers[registerX] = this.registers[registerY];\r\n                        break;\r\n                    }\r\n\r\n                    case 1: {\r\n                        this.registers[registerX] |= this.registers[registerY];\r\n                        break;\r\n                    }\r\n\r\n                    case 2: {\r\n                        this.registers[registerX] &= this.registers[registerY];\r\n                        break;\r\n                    }\r\n\r\n                    case 3: {\r\n                        this.registers[registerX] ^= this.registers[registerY];\r\n                        break;\r\n                    }\r\n\r\n                    case 4: {\r\n                        const result = this.registers[registerX] + this.registers[registerY];\r\n                        this.registers[registerX] = result;\r\n                        this.registers[0xF] = result > 0xFF ? 1 : 0;\r\n                        break;\r\n                    }\r\n\r\n                    case 5: {\r\n                        const notBorrow = this.registers[registerX] > this.registers[registerY];\r\n                        this.registers[registerX] = this.registers[registerX] - this.registers[registerY];\r\n                        this.registers[0xF] = notBorrow ? 1 : 0;\r\n                        break;\r\n                    }\r\n\r\n                    case 6: {\r\n                        const lsb = this.registers[registerX] & 1;\r\n                        this.registers[registerX] >>= 1;\r\n                        this.registers[0xF] = lsb;\r\n                        break;\r\n                    }\r\n\r\n                    case 7: {\r\n                        const notBorrow = this.registers[registerY] > this.registers[registerX];\r\n                        this.registers[registerX] = this.registers[registerY] - this.registers[registerX];\r\n                        this.registers[0xF] = notBorrow ? 1 : 0;\r\n                        break;\r\n                    }\r\n\r\n                    case 0xE: {\r\n                        const msb = this.registers[registerX] & 0b10000000;\r\n                        this.registers[registerX] <<= 1;\r\n                        this.registers[0xF] = msb ? 1 : 0;\r\n                        break;\r\n                    }\r\n\r\n                    default: {\r\n                        console.error(`Unknown instruction: ${instruction.toString(16)}`);\r\n                        this.state = \"finished\";\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n\r\n            case 9: {\r\n                const [registerX, registerY] = extractTwoRegisters(instruction);\r\n                if (this.registers[registerX] !== this.registers[registerY]) {\r\n                    this.pc += 2;\r\n                }\r\n                break;\r\n            }\r\n\r\n            case 0xA: {\r\n                const address = extractAddress(instruction);\r\n                this.addressRegister = address;\r\n                break;\r\n            }\r\n\r\n            case 0xB: {\r\n                const address = extractAddress(instruction);\r\n                this.pc = this.registers[0] + address;\r\n                break;\r\n            }\r\n\r\n            case 0xC: {\r\n                const [register, constant] = extractRegisterAndConstant(instruction);\r\n                this.registers[register] = Math.floor(Math.random() * 256) & constant;\r\n                break;\r\n            }\r\n\r\n            case 0xD: {\r\n                const [registerX, registerY, height] = extractTwoRegistersAndConstant(instruction);\r\n\r\n                const screenX = this.registers[registerX];\r\n                const screenY = this.registers[registerY];\r\n\r\n                for (let y = 0; y < height; ++y) {\r\n                    const row = this.memory[this.addressRegister + y];\r\n\r\n                    for (let x = 0; x < 8; ++x) {\r\n                        const pixel = (row & (1 << (7 - x))) >> (7 - x);\r\n                        const index = (screenY + y) * this.width + (screenX + x);\r\n                        if (this.display[index] && pixel) this.registers[0xF] = 1;\r\n                        this.display[index] ^= pixel ? 1 : 0;\r\n                    }\r\n                }\r\n\r\n                this.draw();\r\n                break;\r\n            }\r\n\r\n            case 0xE: {\r\n                const register = extractRegister(instruction);\r\n\r\n                switch (instruction & 0xFF) {\r\n                    case 0x9E: {\r\n                        if (this.keys[this.registers[register]]) {\r\n                            this.pc += 2;\r\n                        }\r\n                        break;\r\n                    }\r\n\r\n                    case 0xA1: {\r\n                        if (!this.keys[this.registers[register]]) {\r\n                            this.pc += 2;\r\n                        }\r\n                        break;\r\n                    }\r\n\r\n                    default: {\r\n                        console.error(`Unknown instruction: ${instruction.toString(16)}`);\r\n                        this.state = \"finished\";\r\n                    }\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            case 0xF: {\r\n                const register = extractRegister(instruction);\r\n\r\n                switch (instruction & 0xFF) {\r\n                    case 0x07: {\r\n                        this.registers[register] = this.delayTimer;\r\n                        break;\r\n                    }\r\n\r\n                    case 0x0A: {\r\n                        this.state = \"waitkeypress\";\r\n                        this.keypressRegister = register;\r\n                        break;\r\n                    }\r\n\r\n                    case 0x15: {\r\n                        this.delayTimer = this.registers[register];\r\n                        break;\r\n                    }\r\n\r\n                    case 0x18: {\r\n                        this.soundTimer = this.registers[register];\r\n                        break;\r\n                    }\r\n\r\n                    case 0x1E: {\r\n                        this.addressRegister += this.registers[register];\r\n                        this.addressRegister &= 0xFFFF;\r\n                        break;\r\n                    }\r\n\r\n                    case 0x29: {\r\n                        this.addressRegister = 5 * this.registers[register];\r\n                        break;\r\n                    }\r\n\r\n                    case 0x33: {\r\n                        let registerValue = this.registers[register];\r\n\r\n                        for (let i = 2; i >= 0; --i) {\r\n                            this.memory[this.addressRegister + i] = registerValue % 10;\r\n                            registerValue /= 10;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n\r\n                    case 0x55: {\r\n                        for (let i = 0; i <= register; ++i) {\r\n                            this.memory[this.addressRegister + i] = this.registers[i];\r\n                        }\r\n                        break;\r\n                    }\r\n\r\n                    case 0x65: {\r\n                        for (let i = 0; i <= register; ++i) {\r\n                            this.registers[i] = this.memory[this.addressRegister + i];\r\n                        }\r\n                        break;\r\n                    }\r\n\r\n                    default: {\r\n                        console.error(`Unknown instruction: ${instruction.toString(16)}`);\r\n                        this.state = \"finished\";\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n\r\n            default:\r\n                console.error(`Unknown instruction: ${instruction.toString(16)}`);\r\n                this.state = \"finished\";\r\n        }\r\n    }\r\n\r\n    keydown(key: number) {\r\n        this.keys[key] = 1;\r\n        if (this.state == \"waitkeypress\") {\r\n            console.assert(this.keypressRegister !== null);\r\n            this.registers[this.keypressRegister] = key;\r\n        }\r\n    }\r\n\r\n    keyup(key: number) {\r\n        this.keys[key] = 0;\r\n    }\r\n\r\n    cycle() {\r\n        if (this.state === \"running\") {\r\n            const instruction = (this.memory[this.pc] << 8) | (this.memory[this.pc + 1]);\r\n            this.pc += 2;\r\n            return this.executeInstruction(instruction);\r\n        }\r\n    }\r\n}\r\n","export function askForROMFile(): Promise<File> {\r\n    return new Promise((resolve, _reject) => {\r\n        const $fileInput = document.createElement(\"input\");\r\n        $fileInput.type = \"file\";\r\n        document.body.appendChild($fileInput);\r\n\r\n        $fileInput.addEventListener(\"input\", () => {\r\n            const file = $fileInput.files[0];\r\n            $fileInput.remove();\r\n            resolve(file);\r\n        });\r\n    });\r\n}\r\n\r\nexport function readROM(file: File): Promise<ArrayBuffer> {\r\n    return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.addEventListener(\"load\", () => {\r\n        // @ts-ignore We, the hoomans, know that reader.result is an ArrayBuffer. TS does not.\r\n        resolve(reader.result);\r\n    });\r\n    reader.readAsArrayBuffer(file);\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\nimport { askForROMFile, readROM } from \"./rom_manager\";\r\nimport { Chip8Interpreter } from \"./interpreter\";\r\n\r\naskForROMFile()\r\n    .then(file => readROM(file))\r\n    .then(data => {\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.width = 64 * 10;\r\n        canvas.height = 32 * 10;\r\n        document.body.appendChild(canvas);\r\n\r\n        const interpreter = new Chip8Interpreter(canvas);\r\n        const rom = new Uint8Array(data);\r\n        interpreter.loadROMData(rom);\r\n\r\n        const keyToIndex = (key: string) => parseInt(key, 16);\r\n\r\n        window.addEventListener(\"keydown\", e => {\r\n            let index = keyToIndex(e.key);\r\n            if (!isNaN(index)) interpreter.keydown(index);\r\n        });\r\n\r\n        window.addEventListener(\"keyup\", e => {\r\n            let index = keyToIndex(e.key);\r\n            if (!isNaN(index)) interpreter.keyup(index);\r\n        });\r\n\r\n        let lastUpdate: number | null = null;\r\n\r\n        const $ipsInput = document.createElement(\"input\");\r\n        $ipsInput.name = \"ips\";\r\n        $ipsInput.type = \"range\";\r\n        $ipsInput.min = \"0\";\r\n        $ipsInput.value = \"1200\";\r\n        $ipsInput.max = \"2500\";\r\n        document.body.appendChild($ipsInput);\r\n\r\n        const $ipsInputLabel = document.createElement(\"label\");\r\n        $ipsInputLabel.setAttribute(\"for\", \"ips\");\r\n        $ipsInputLabel.textContent = `Instructions Per Second (${$ipsInput.value})`;\r\n        document.body.appendChild($ipsInputLabel);\r\n\r\n        let msPerFrame = (1 / +$ipsInput.value) * 1000;\r\n        $ipsInput.addEventListener(\"input\", () => {\r\n            msPerFrame = (1 / +$ipsInput.value) * 1000;\r\n            $ipsInputLabel.textContent = `Instructions Per Second (${$ipsInput.value})`;\r\n        })\r\n\r\n        window.requestAnimationFrame(function loop(timestamp) {\r\n\r\n            if (lastUpdate !== null) {\r\n                const dt = timestamp - lastUpdate;\r\n                const frames = dt / msPerFrame;\r\n                for (let i = 0; i < frames; ++i) {\r\n                    interpreter.cycle();\r\n                }\r\n            }\r\n            lastUpdate = timestamp;\r\n            window.requestAnimationFrame(loop);\r\n        });\r\n    });\r\n"],"sourceRoot":""}